syntax = "proto3";

package proto;

// The Sniffer service is responsible capturing data from a file or a network
// interface card and relaying the data to clients.
service Sniffer {
  // Get all discovered access points.
  rpc GetAllAccessPoints(Empty) returns (NetworkList) {}

  // Get a specific access point.
  rpc GetAccessPoint(NetworkName) returns (NetworkInfo) {}

  // Focus a specific network allowing for capture of more packets.
  rpc FocusNetwork(NetworkName) returns (Empty) {}

  // Get information whether any access point is being focused.
  rpc GetFocusState(Empty) returns (FocusState) {}

  // Stop focusing an access point.
  rpc StopFocus(Empty) returns (Empty) {}

  // Decryption & getting handshakes
  rpc ProvidePassword(DecryptRequest) returns (Empty) {}

  // Get the decrypted packets for an access point.
  rpc GetDecryptedPackets(NetworkName) returns (stream Packet) {}

  // Deauthenticate a client from a network.
  rpc DeauthNetwork(DeauthRequest) returns (Empty) {}

  // Ignore a specific network, it won't show up in the network list.
  rpc IgnoreNetwork(NetworkName) returns (Empty) {}

  // Get all the ignored networks.
  rpc GetIgnoredNetworks(Empty) returns (NetworkList) {}

  // Save the decrypted stream from a network to a file.
  rpc SaveDecryptedTraffic(NetworkName) returns (Empty) {}

  // Get all recordings on disk, those can also be loaded with `LoadRecording`.
  rpc GetAvailableRecordings(Empty) returns (RecordingsList) {}

  // Load a specific network traffic recording.
  rpc LoadRecording(File) returns (stream Packet) {}

  // Enable mayhem mode, deauthenticating all clints from all networks.
  rpc SetMayhemMode(NewMayhemState) returns (Empty) {}

  // Enable the LED on the server and subscribe to the LED updates.
  rpc GetLED(Empty) returns (stream LEDState) {}
}

// Empty message, it exists since we can't send no arguments or receive no
// data
message Empty {}

// Network name denoted by its ssid
message NetworkName { string ssid = 1; }

// User of a wireless netwokr (in tcp/udp packet streams)
message User {
  string MACAddress = 1;
  string IPv4Address = 2;
  int64 port = 3;
}

// Small, stupid packet so we don't display a lot of data to the user
// might change in the future
message Packet {
  User from = 1;
  User to = 2;
  string protocol = 3; // For now TCP/UDP
  bytes data = 4;
}

// Add a user MAC to the deauth request
message DeauthRequest {
  NetworkName network = 1;
  string user_addr = 2;
}

// List of networks
message NetworkList { repeated string names = 1; }

// Decryption request
message DecryptRequest {
  string ssid = 1;
  string passwd = 2;
}

// Access Point information
message NetworkInfo {
  string bssid = 1;
  string name = 2;
  int64 channel = 3;
  int64 encrypted_packet_count = 4;
  int64 decrypted_packet_count = 5;
  repeated ClientInfo clients = 6;
}

// Information about a client which is connected to a particular WLAN
message ClientInfo {
  string addr = 1;
  bool is_decrypted = 2;
  int64 handshake_num = 3;
  bool can_decrypt = 4;
}

// Information about the focus state
message FocusState {
  bool focused = 1;
  NetworkName name =
      2; // This is optional, if we are NOT in focus mode this doesn't exist
}

// Information about a file
message File { string name = 1; }

// List of available recordings
message RecordingsList { repeated File files = 1; }

// Set mayhem (deauthing all networks)
message NewMayhemState { bool state = 1; }

// Color of the LED
enum Color {
  RED = 0;
  YELLOW = 1;
  GREEN = 2;
}

// Change LED state
message LEDState {
  bool state = 1;
  Color color = 2;
}
