// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "service.proto" (package "proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Sniffer } from "./service";
import type { BatteryGetLevelResponse } from "./service";
import type { LogEntry } from "./service";
import type { NetworkInterfaceListResponse } from "./service";
import type { RecordingLoadDecryptedRequest } from "./service";
import type { RecordingListResponse } from "./service";
import type { RecordingListRequest } from "./service";
import type { RecordingCreateResponse } from "./service";
import type { RecordingCreateRequest } from "./service";
import type { FocusGetActiveResponse } from "./service";
import type { FocusStartResponse } from "./service";
import type { FocusStartRequest } from "./service";
import type { APCreateRecordingResponse } from "./service";
import type { APCreateRecordingRequest } from "./service";
import type { APIgnoreRequest } from "./service";
import type { APGetHashResponse } from "./service";
import type { APGetHashRequest } from "./service";
import type { APDeauthClientRequest } from "./service";
import type { APDeauthRequest } from "./service";
import type { Packet } from "./service";
import type { APGetDeryptedStreamRequest } from "./service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { APProvidePasswordResponse } from "./service";
import type { APProvidePasswordRequest } from "./service";
import type { APGetResponse } from "./service";
import type { APGetRequest } from "./service";
import type { APListResponse } from "./service";
import type { SnifferListResponse } from "./service";
import type { Empty } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SnifferID } from "./service";
import type { SnifferCreateRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The Sniffer service is responsible capturing data from a file or a network
 * interface card and relaying the data to clients.
 *
 * @generated from protobuf service proto.Sniffer
 */
export interface ISnifferClient {
    /**
     * @generated from protobuf rpc: SnifferCreate(proto.SnifferCreateRequest) returns (proto.SnifferID);
     */
    snifferCreate(input: SnifferCreateRequest, options?: RpcOptions): UnaryCall<SnifferCreateRequest, SnifferID>;
    /**
     * @generated from protobuf rpc: SnifferDestroy(proto.SnifferID) returns (proto.Empty);
     */
    snifferDestroy(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, Empty>;
    /**
     * @generated from protobuf rpc: SnifferList(proto.Empty) returns (proto.SnifferListResponse);
     */
    snifferList(input: Empty, options?: RpcOptions): UnaryCall<Empty, SnifferListResponse>;
    /**
     * @generated from protobuf rpc: AccessPointList(proto.SnifferID) returns (proto.APListResponse);
     */
    accessPointList(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, APListResponse>;
    /**
     * @generated from protobuf rpc: AccessPointGet(proto.APGetRequest) returns (proto.APGetResponse);
     */
    accessPointGet(input: APGetRequest, options?: RpcOptions): UnaryCall<APGetRequest, APGetResponse>;
    /**
     * @generated from protobuf rpc: AccessPointProvidePassword(proto.APProvidePasswordRequest) returns (proto.APProvidePasswordResponse);
     */
    accessPointProvidePassword(input: APProvidePasswordRequest, options?: RpcOptions): UnaryCall<APProvidePasswordRequest, APProvidePasswordResponse>;
    /**
     * @generated from protobuf rpc: AccessPointGetDeryptedStream(proto.APGetDeryptedStreamRequest) returns (stream proto.Packet);
     */
    accessPointGetDeryptedStream(input: APGetDeryptedStreamRequest, options?: RpcOptions): ServerStreamingCall<APGetDeryptedStreamRequest, Packet>;
    /**
     * @generated from protobuf rpc: AccessPointDeauth(proto.APDeauthRequest) returns (proto.Empty);
     */
    accessPointDeauth(input: APDeauthRequest, options?: RpcOptions): UnaryCall<APDeauthRequest, Empty>;
    /**
     * @generated from protobuf rpc: AccessPointDeauthClient(proto.APDeauthClientRequest) returns (proto.Empty);
     */
    accessPointDeauthClient(input: APDeauthClientRequest, options?: RpcOptions): UnaryCall<APDeauthClientRequest, Empty>;
    /**
     * @generated from protobuf rpc: AccessPointGetHash(proto.APGetHashRequest) returns (proto.APGetHashResponse);
     */
    accessPointGetHash(input: APGetHashRequest, options?: RpcOptions): UnaryCall<APGetHashRequest, APGetHashResponse>;
    /**
     * @generated from protobuf rpc: AccessPointIgnore(proto.APIgnoreRequest) returns (proto.Empty);
     */
    accessPointIgnore(input: APIgnoreRequest, options?: RpcOptions): UnaryCall<APIgnoreRequest, Empty>;
    /**
     * @generated from protobuf rpc: AccessPointListIgnored(proto.SnifferID) returns (proto.APListResponse);
     */
    accessPointListIgnored(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, APListResponse>;
    /**
     * @generated from protobuf rpc: AccessPointCreateRecording(proto.APCreateRecordingRequest) returns (proto.APCreateRecordingResponse);
     */
    accessPointCreateRecording(input: APCreateRecordingRequest, options?: RpcOptions): UnaryCall<APCreateRecordingRequest, APCreateRecordingResponse>;
    /**
     * @generated from protobuf rpc: FocusStart(proto.FocusStartRequest) returns (proto.FocusStartResponse);
     */
    focusStart(input: FocusStartRequest, options?: RpcOptions): UnaryCall<FocusStartRequest, FocusStartResponse>;
    /**
     * @generated from protobuf rpc: FocusGetActive(proto.SnifferID) returns (proto.FocusGetActiveResponse);
     */
    focusGetActive(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, FocusGetActiveResponse>;
    /**
     * @generated from protobuf rpc: FocusStop(proto.SnifferID) returns (proto.Empty);
     */
    focusStop(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, Empty>;
    /**
     * @generated from protobuf rpc: RecordingCreate(proto.RecordingCreateRequest) returns (proto.RecordingCreateResponse);
     */
    recordingCreate(input: RecordingCreateRequest, options?: RpcOptions): UnaryCall<RecordingCreateRequest, RecordingCreateResponse>;
    /**
     * @generated from protobuf rpc: RecordingList(proto.RecordingListRequest) returns (proto.RecordingListResponse);
     */
    recordingList(input: RecordingListRequest, options?: RpcOptions): UnaryCall<RecordingListRequest, RecordingListResponse>;
    /**
     * @generated from protobuf rpc: RecordingLoadDecrypted(proto.RecordingLoadDecryptedRequest) returns (stream proto.Packet);
     */
    recordingLoadDecrypted(input: RecordingLoadDecryptedRequest, options?: RpcOptions): ServerStreamingCall<RecordingLoadDecryptedRequest, Packet>;
    /**
     * @generated from protobuf rpc: NetworkInterfaceList(proto.Empty) returns (proto.NetworkInterfaceListResponse);
     */
    networkInterfaceList(input: Empty, options?: RpcOptions): UnaryCall<Empty, NetworkInterfaceListResponse>;
    /**
     * @generated from protobuf rpc: LogGetStream(proto.Empty) returns (stream proto.LogEntry);
     */
    logGetStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, LogEntry>;
    /**
     * @generated from protobuf rpc: BatteryGetLevel(proto.Empty) returns (proto.BatteryGetLevelResponse);
     */
    batteryGetLevel(input: Empty, options?: RpcOptions): UnaryCall<Empty, BatteryGetLevelResponse>;
}
/**
 * The Sniffer service is responsible capturing data from a file or a network
 * interface card and relaying the data to clients.
 *
 * @generated from protobuf service proto.Sniffer
 */
export class SnifferClient implements ISnifferClient, ServiceInfo {
    typeName = Sniffer.typeName;
    methods = Sniffer.methods;
    options = Sniffer.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SnifferCreate(proto.SnifferCreateRequest) returns (proto.SnifferID);
     */
    snifferCreate(input: SnifferCreateRequest, options?: RpcOptions): UnaryCall<SnifferCreateRequest, SnifferID> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SnifferCreateRequest, SnifferID>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SnifferDestroy(proto.SnifferID) returns (proto.Empty);
     */
    snifferDestroy(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SnifferID, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SnifferList(proto.Empty) returns (proto.SnifferListResponse);
     */
    snifferList(input: Empty, options?: RpcOptions): UnaryCall<Empty, SnifferListResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, SnifferListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointList(proto.SnifferID) returns (proto.APListResponse);
     */
    accessPointList(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, APListResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SnifferID, APListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointGet(proto.APGetRequest) returns (proto.APGetResponse);
     */
    accessPointGet(input: APGetRequest, options?: RpcOptions): UnaryCall<APGetRequest, APGetResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<APGetRequest, APGetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointProvidePassword(proto.APProvidePasswordRequest) returns (proto.APProvidePasswordResponse);
     */
    accessPointProvidePassword(input: APProvidePasswordRequest, options?: RpcOptions): UnaryCall<APProvidePasswordRequest, APProvidePasswordResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<APProvidePasswordRequest, APProvidePasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointGetDeryptedStream(proto.APGetDeryptedStreamRequest) returns (stream proto.Packet);
     */
    accessPointGetDeryptedStream(input: APGetDeryptedStreamRequest, options?: RpcOptions): ServerStreamingCall<APGetDeryptedStreamRequest, Packet> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<APGetDeryptedStreamRequest, Packet>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointDeauth(proto.APDeauthRequest) returns (proto.Empty);
     */
    accessPointDeauth(input: APDeauthRequest, options?: RpcOptions): UnaryCall<APDeauthRequest, Empty> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<APDeauthRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointDeauthClient(proto.APDeauthClientRequest) returns (proto.Empty);
     */
    accessPointDeauthClient(input: APDeauthClientRequest, options?: RpcOptions): UnaryCall<APDeauthClientRequest, Empty> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<APDeauthClientRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointGetHash(proto.APGetHashRequest) returns (proto.APGetHashResponse);
     */
    accessPointGetHash(input: APGetHashRequest, options?: RpcOptions): UnaryCall<APGetHashRequest, APGetHashResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<APGetHashRequest, APGetHashResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointIgnore(proto.APIgnoreRequest) returns (proto.Empty);
     */
    accessPointIgnore(input: APIgnoreRequest, options?: RpcOptions): UnaryCall<APIgnoreRequest, Empty> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<APIgnoreRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointListIgnored(proto.SnifferID) returns (proto.APListResponse);
     */
    accessPointListIgnored(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, APListResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<SnifferID, APListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessPointCreateRecording(proto.APCreateRecordingRequest) returns (proto.APCreateRecordingResponse);
     */
    accessPointCreateRecording(input: APCreateRecordingRequest, options?: RpcOptions): UnaryCall<APCreateRecordingRequest, APCreateRecordingResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<APCreateRecordingRequest, APCreateRecordingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FocusStart(proto.FocusStartRequest) returns (proto.FocusStartResponse);
     */
    focusStart(input: FocusStartRequest, options?: RpcOptions): UnaryCall<FocusStartRequest, FocusStartResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<FocusStartRequest, FocusStartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FocusGetActive(proto.SnifferID) returns (proto.FocusGetActiveResponse);
     */
    focusGetActive(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, FocusGetActiveResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<SnifferID, FocusGetActiveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FocusStop(proto.SnifferID) returns (proto.Empty);
     */
    focusStop(input: SnifferID, options?: RpcOptions): UnaryCall<SnifferID, Empty> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<SnifferID, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RecordingCreate(proto.RecordingCreateRequest) returns (proto.RecordingCreateResponse);
     */
    recordingCreate(input: RecordingCreateRequest, options?: RpcOptions): UnaryCall<RecordingCreateRequest, RecordingCreateResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecordingCreateRequest, RecordingCreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RecordingList(proto.RecordingListRequest) returns (proto.RecordingListResponse);
     */
    recordingList(input: RecordingListRequest, options?: RpcOptions): UnaryCall<RecordingListRequest, RecordingListResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecordingListRequest, RecordingListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RecordingLoadDecrypted(proto.RecordingLoadDecryptedRequest) returns (stream proto.Packet);
     */
    recordingLoadDecrypted(input: RecordingLoadDecryptedRequest, options?: RpcOptions): ServerStreamingCall<RecordingLoadDecryptedRequest, Packet> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecordingLoadDecryptedRequest, Packet>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: NetworkInterfaceList(proto.Empty) returns (proto.NetworkInterfaceListResponse);
     */
    networkInterfaceList(input: Empty, options?: RpcOptions): UnaryCall<Empty, NetworkInterfaceListResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, NetworkInterfaceListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LogGetStream(proto.Empty) returns (stream proto.LogEntry);
     */
    logGetStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, LogEntry> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, LogEntry>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BatteryGetLevel(proto.Empty) returns (proto.BatteryGetLevelResponse);
     */
    batteryGetLevel(input: Empty, options?: RpcOptions): UnaryCall<Empty, BatteryGetLevelResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, BatteryGetLevelResponse>("unary", this._transport, method, opt, input);
    }
}
