/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.24.4
// source: packets.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as packets_pb from './packets_pb'; // proto import: "packets.proto"


export class SniffinsonClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAllAccessPoints = new grpcWeb.MethodDescriptor(
    '/Sniffinson/GetAllAccessPoints',
    grpcWeb.MethodType.UNARY,
    packets_pb.Empty,
    packets_pb.NetworkList,
    (request: packets_pb.Empty) => {
      return request.serializeBinary();
    },
    packets_pb.NetworkList.deserializeBinary
  );

  getAllAccessPoints(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.NetworkList>;

  getAllAccessPoints(
    request: packets_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.NetworkList) => void): grpcWeb.ClientReadableStream<packets_pb.NetworkList>;

  getAllAccessPoints(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.NetworkList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/GetAllAccessPoints',
        request,
        metadata || {},
        this.methodDescriptorGetAllAccessPoints,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/GetAllAccessPoints',
    request,
    metadata || {},
    this.methodDescriptorGetAllAccessPoints);
  }

  methodDescriptorGetAccessPoint = new grpcWeb.MethodDescriptor(
    '/Sniffinson/GetAccessPoint',
    grpcWeb.MethodType.UNARY,
    packets_pb.NetworkName,
    packets_pb.NetworkInfo,
    (request: packets_pb.NetworkName) => {
      return request.serializeBinary();
    },
    packets_pb.NetworkInfo.deserializeBinary
  );

  getAccessPoint(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.NetworkInfo>;

  getAccessPoint(
    request: packets_pb.NetworkName,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.NetworkInfo) => void): grpcWeb.ClientReadableStream<packets_pb.NetworkInfo>;

  getAccessPoint(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.NetworkInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/GetAccessPoint',
        request,
        metadata || {},
        this.methodDescriptorGetAccessPoint,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/GetAccessPoint',
    request,
    metadata || {},
    this.methodDescriptorGetAccessPoint);
  }

  methodDescriptorFocusNetwork = new grpcWeb.MethodDescriptor(
    '/Sniffinson/FocusNetwork',
    grpcWeb.MethodType.UNARY,
    packets_pb.NetworkName,
    packets_pb.Empty,
    (request: packets_pb.NetworkName) => {
      return request.serializeBinary();
    },
    packets_pb.Empty.deserializeBinary
  );

  focusNetwork(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.Empty>;

  focusNetwork(
    request: packets_pb.NetworkName,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void): grpcWeb.ClientReadableStream<packets_pb.Empty>;

  focusNetwork(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/FocusNetwork',
        request,
        metadata || {},
        this.methodDescriptorFocusNetwork,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/FocusNetwork',
    request,
    metadata || {},
    this.methodDescriptorFocusNetwork);
  }

  methodDescriptorGetFocusState = new grpcWeb.MethodDescriptor(
    '/Sniffinson/GetFocusState',
    grpcWeb.MethodType.UNARY,
    packets_pb.Empty,
    packets_pb.FocusState,
    (request: packets_pb.Empty) => {
      return request.serializeBinary();
    },
    packets_pb.FocusState.deserializeBinary
  );

  getFocusState(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.FocusState>;

  getFocusState(
    request: packets_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.FocusState) => void): grpcWeb.ClientReadableStream<packets_pb.FocusState>;

  getFocusState(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.FocusState) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/GetFocusState',
        request,
        metadata || {},
        this.methodDescriptorGetFocusState,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/GetFocusState',
    request,
    metadata || {},
    this.methodDescriptorGetFocusState);
  }

  methodDescriptorStopFocus = new grpcWeb.MethodDescriptor(
    '/Sniffinson/StopFocus',
    grpcWeb.MethodType.UNARY,
    packets_pb.Empty,
    packets_pb.Empty,
    (request: packets_pb.Empty) => {
      return request.serializeBinary();
    },
    packets_pb.Empty.deserializeBinary
  );

  stopFocus(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.Empty>;

  stopFocus(
    request: packets_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void): grpcWeb.ClientReadableStream<packets_pb.Empty>;

  stopFocus(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/StopFocus',
        request,
        metadata || {},
        this.methodDescriptorStopFocus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/StopFocus',
    request,
    metadata || {},
    this.methodDescriptorStopFocus);
  }

  methodDescriptorProvidePassword = new grpcWeb.MethodDescriptor(
    '/Sniffinson/ProvidePassword',
    grpcWeb.MethodType.UNARY,
    packets_pb.DecryptRequest,
    packets_pb.DecryptResponse,
    (request: packets_pb.DecryptRequest) => {
      return request.serializeBinary();
    },
    packets_pb.DecryptResponse.deserializeBinary
  );

  providePassword(
    request: packets_pb.DecryptRequest,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.DecryptResponse>;

  providePassword(
    request: packets_pb.DecryptRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.DecryptResponse) => void): grpcWeb.ClientReadableStream<packets_pb.DecryptResponse>;

  providePassword(
    request: packets_pb.DecryptRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.DecryptResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/ProvidePassword',
        request,
        metadata || {},
        this.methodDescriptorProvidePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/ProvidePassword',
    request,
    metadata || {},
    this.methodDescriptorProvidePassword);
  }

  methodDescriptorGetDecryptedPackets = new grpcWeb.MethodDescriptor(
    '/Sniffinson/GetDecryptedPackets',
    grpcWeb.MethodType.SERVER_STREAMING,
    packets_pb.NetworkName,
    packets_pb.Packet,
    (request: packets_pb.NetworkName) => {
      return request.serializeBinary();
    },
    packets_pb.Packet.deserializeBinary
  );

  getDecryptedPackets(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<packets_pb.Packet> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/Sniffinson/GetDecryptedPackets',
      request,
      metadata || {},
      this.methodDescriptorGetDecryptedPackets);
  }

  methodDescriptorDeauthNetwork = new grpcWeb.MethodDescriptor(
    '/Sniffinson/DeauthNetwork',
    grpcWeb.MethodType.UNARY,
    packets_pb.DeauthRequest,
    packets_pb.Empty,
    (request: packets_pb.DeauthRequest) => {
      return request.serializeBinary();
    },
    packets_pb.Empty.deserializeBinary
  );

  deauthNetwork(
    request: packets_pb.DeauthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.Empty>;

  deauthNetwork(
    request: packets_pb.DeauthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void): grpcWeb.ClientReadableStream<packets_pb.Empty>;

  deauthNetwork(
    request: packets_pb.DeauthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/DeauthNetwork',
        request,
        metadata || {},
        this.methodDescriptorDeauthNetwork,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/DeauthNetwork',
    request,
    metadata || {},
    this.methodDescriptorDeauthNetwork);
  }

  methodDescriptorIgnoreNetwork = new grpcWeb.MethodDescriptor(
    '/Sniffinson/IgnoreNetwork',
    grpcWeb.MethodType.UNARY,
    packets_pb.NetworkName,
    packets_pb.Empty,
    (request: packets_pb.NetworkName) => {
      return request.serializeBinary();
    },
    packets_pb.Empty.deserializeBinary
  );

  ignoreNetwork(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.Empty>;

  ignoreNetwork(
    request: packets_pb.NetworkName,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void): grpcWeb.ClientReadableStream<packets_pb.Empty>;

  ignoreNetwork(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/IgnoreNetwork',
        request,
        metadata || {},
        this.methodDescriptorIgnoreNetwork,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/IgnoreNetwork',
    request,
    metadata || {},
    this.methodDescriptorIgnoreNetwork);
  }

  methodDescriptorGetIgnoredNetworks = new grpcWeb.MethodDescriptor(
    '/Sniffinson/GetIgnoredNetworks',
    grpcWeb.MethodType.UNARY,
    packets_pb.Empty,
    packets_pb.NetworkList,
    (request: packets_pb.Empty) => {
      return request.serializeBinary();
    },
    packets_pb.NetworkList.deserializeBinary
  );

  getIgnoredNetworks(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.NetworkList>;

  getIgnoredNetworks(
    request: packets_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.NetworkList) => void): grpcWeb.ClientReadableStream<packets_pb.NetworkList>;

  getIgnoredNetworks(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.NetworkList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/GetIgnoredNetworks',
        request,
        metadata || {},
        this.methodDescriptorGetIgnoredNetworks,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/GetIgnoredNetworks',
    request,
    metadata || {},
    this.methodDescriptorGetIgnoredNetworks);
  }

  methodDescriptorSaveDecryptedTraffic = new grpcWeb.MethodDescriptor(
    '/Sniffinson/SaveDecryptedTraffic',
    grpcWeb.MethodType.UNARY,
    packets_pb.NetworkName,
    packets_pb.Empty,
    (request: packets_pb.NetworkName) => {
      return request.serializeBinary();
    },
    packets_pb.Empty.deserializeBinary
  );

  saveDecryptedTraffic(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.Empty>;

  saveDecryptedTraffic(
    request: packets_pb.NetworkName,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void): grpcWeb.ClientReadableStream<packets_pb.Empty>;

  saveDecryptedTraffic(
    request: packets_pb.NetworkName,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/SaveDecryptedTraffic',
        request,
        metadata || {},
        this.methodDescriptorSaveDecryptedTraffic,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/SaveDecryptedTraffic',
    request,
    metadata || {},
    this.methodDescriptorSaveDecryptedTraffic);
  }

  methodDescriptorGetAvailableRecordings = new grpcWeb.MethodDescriptor(
    '/Sniffinson/GetAvailableRecordings',
    grpcWeb.MethodType.UNARY,
    packets_pb.Empty,
    packets_pb.RecordingsList,
    (request: packets_pb.Empty) => {
      return request.serializeBinary();
    },
    packets_pb.RecordingsList.deserializeBinary
  );

  getAvailableRecordings(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.RecordingsList>;

  getAvailableRecordings(
    request: packets_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.RecordingsList) => void): grpcWeb.ClientReadableStream<packets_pb.RecordingsList>;

  getAvailableRecordings(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.RecordingsList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/GetAvailableRecordings',
        request,
        metadata || {},
        this.methodDescriptorGetAvailableRecordings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/GetAvailableRecordings',
    request,
    metadata || {},
    this.methodDescriptorGetAvailableRecordings);
  }

  methodDescriptorLoadRecording = new grpcWeb.MethodDescriptor(
    '/Sniffinson/LoadRecording',
    grpcWeb.MethodType.SERVER_STREAMING,
    packets_pb.File,
    packets_pb.Packet,
    (request: packets_pb.File) => {
      return request.serializeBinary();
    },
    packets_pb.Packet.deserializeBinary
  );

  loadRecording(
    request: packets_pb.File,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<packets_pb.Packet> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/Sniffinson/LoadRecording',
      request,
      metadata || {},
      this.methodDescriptorLoadRecording);
  }

  methodDescriptorSetMayhemMode = new grpcWeb.MethodDescriptor(
    '/Sniffinson/SetMayhemMode',
    grpcWeb.MethodType.UNARY,
    packets_pb.NewMayhemState,
    packets_pb.Empty,
    (request: packets_pb.NewMayhemState) => {
      return request.serializeBinary();
    },
    packets_pb.Empty.deserializeBinary
  );

  setMayhemMode(
    request: packets_pb.NewMayhemState,
    metadata?: grpcWeb.Metadata | null): Promise<packets_pb.Empty>;

  setMayhemMode(
    request: packets_pb.NewMayhemState,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void): grpcWeb.ClientReadableStream<packets_pb.Empty>;

  setMayhemMode(
    request: packets_pb.NewMayhemState,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: packets_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Sniffinson/SetMayhemMode',
        request,
        metadata || {},
        this.methodDescriptorSetMayhemMode,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Sniffinson/SetMayhemMode',
    request,
    metadata || {},
    this.methodDescriptorSetMayhemMode);
  }

  methodDescriptorGetLED = new grpcWeb.MethodDescriptor(
    '/Sniffinson/GetLED',
    grpcWeb.MethodType.SERVER_STREAMING,
    packets_pb.Empty,
    packets_pb.LEDState,
    (request: packets_pb.Empty) => {
      return request.serializeBinary();
    },
    packets_pb.LEDState.deserializeBinary
  );

  getLED(
    request: packets_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<packets_pb.LEDState> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/Sniffinson/GetLED',
      request,
      metadata || {},
      this.methodDescriptorGetLED);
  }

}

